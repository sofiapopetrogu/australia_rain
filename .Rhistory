glm_predict_6_0<- ifelse(glm_predict0 > threshold6, 1, 0)
create_confusion_matrix <- function(confusion_matrix, threshold, error, accuracy) {
# Extract the confusion matrix table
cm_table <- as.data.frame(confusion_matrix$table)
#Extract F1 score
f1_score <- confusion_matrix$byClass["F1"]
# Plot the confusion matrix using ggplot2
ggplot(data = cm_table, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "white") +
geom_text(aes(label = Freq), color = "black", size = 8) +
scale_fill_gradient(low = "white", high = "steelblue") +
labs(title = paste("Confusion Matrix for Threshold = ", threshold, "with F1-Score:", round(f1_score, 3), "Error:", round(error, 3) , "Accuracy:", round(accuracy, 3)), x = "Target", y = "Prediction") +
theme_minimal() +
theme(axis.text = element_text(size = 8),
plot.title = element_text(size = 8, face = "bold"))
}
# Confusion matrix with threshold = 0.4
table(rain_n_test0$RainTomorrow, glm_predict_4_0)
error4_0 <- mean(glm_predict_4_0!=rain_n_test0$RainTomorrow)
accuracy4_0 <- mean(glm_predict_4_0==rain_n_test0$RainTomorrow)
cm4_0 <- confusionMatrix(data = factor(glm_predict_4_0), reference = factor(rain_n_test0$RainTomorrow), mode ='everything')
# Confusion matrix with threshold = 0.5
table(rain_n_test0$RainTomorrow, glm_predict_5_0)
error5_0 <- mean(glm_predict_5_0!=rain_n_test0$RainTomorrow)
accuracy5_0 <- mean(glm_predict_5_0==rain_n_test0$RainTomorrow)
cm5_0 <- confusionMatrix(data = factor(glm_predict_5_0), reference = factor(rain_n_test0$RainTomorrow), mode ='everything')
# Confusion matrix with threshold = 0.6
table(rain_n_test0$RainTomorrow, glm_predict_6_0)
error6_0 <- mean(glm_predict_6_0!=rain_n_test0$RainTomorrow)
accuracy6_0 <- mean(glm_predict_6_0==rain_n_test0$RainTomorrow)
cm6_0 <- confusionMatrix(data = factor(glm_predict_6_0), reference = factor(rain_n_test0$RainTomorrow), mode ='everything')
a0 <- create_confusion_matrix(cm4_0, 0.4, error4_0, accuracy4_0)
b0 <- create_confusion_matrix(cm5_0, 0.5, error5_0, accuracy5_0)
c0 <- create_confusion_matrix(cm6_0, 0.6, error6_0, accuracy6_0)
# Threshold of 0.05 is the best among thresholds in terms of accuracy, sensitivity, and specificity
cm_all0 = list(a0, b0, c0)
plot_width <- c(4, 4, 4)
grid.arrange(grobs = cm_all0, nrow = 3, width = plot_width)
#Downsamples majority class(0)
#Added yname to specify the target variable in downSample function, ow it assumes first col is target
rain_balanced <- downSample(x = rain_n[, -which(names(rain_n) == "RainTomorrow")],
y = factor(rain_n$RainTomorrow),
yname = "RainTomorrow")
table(rain_balanced$RainTomorrow)
head(rain_balanced)
#Check if there are any NAs
sum(is.na(rain_balanced$RainTomorrow))
#Test/Train Split
set.seed(123)
train_balanced <- sample(1:nrow(rain_balanced), nrow(rain_balanced) * 0.75)
# Calculate the test indices
test_balanced <- setdiff(1:nrow(rain_balanced), train_balanced)
# Split the target variable into train and test sets
rain_balanced_train <- rain_balanced[train_balanced,]
rain_balanced_test <- rain_balanced[test_balanced ,]
glm_model_balanced <- glm(data = rain_balanced_train,
rain_balanced_train$RainTomorrow ~ .,
family = binomial)
#R squared and Variance Inflation Factor (VIF)
#If the VIF value for a predictor variable is greater than 1, it indicates the presence of multicollinearity, suggesting that the predictor variable is highly correlated with other predictor variables in the model.
model_summary_balanced <- summary(glm_model_balanced)
summary(glm_model_balanced)
r2_balanced <- 1 - (model_summary_balanced$deviance/model_summary_balanced$null.deviance) # 0.3849359
vif_balanced <- 1/(1-r2_balanced) # 1.625847
#Predict test with model
glm_predict_balanced <- predict(glm_model_balanced, rain_balanced_test, type = "response")
#Convert predictions into 0,1 based on different thresholds
glm_predict_4_balanced<- ifelse(glm_predict_balanced > threshold4, 1, 0)
glm_predict_5_balanced<- ifelse(glm_predict_balanced > threshold5, 1, 0)
glm_predict_6_balanced<- ifelse(glm_predict_balanced > threshold6, 1, 0)
# Confusion matrix with threshold = 0.4
table(rain_balanced_test$RainTomorrow, glm_predict_4_balanced)
error4_balanced <- mean(glm_predict_4_balanced!=rain_balanced_test$RainTomorrow)
accuracy4_balanced <- mean(glm_predict_4_balanced==rain_balanced_test$RainTomorrow)
cm4_balanced <- confusionMatrix(data = factor(glm_predict_4_balanced), reference = factor(rain_balanced_test$RainTomorrow), mode ='everything')
# Confusion matrix with threshold = 0.5
table(rain_balanced_test$RainTomorrow, glm_predict_5_balanced)
error5_balanced <- mean(glm_predict_5_balanced!=rain_balanced_test$RainTomorrow)
accuracy5_balanced <- mean(glm_predict_5_balanced==rain_balanced_test$RainTomorrow)
cm5_balanced <- confusionMatrix(data = factor(glm_predict_5_balanced), reference = factor(rain_balanced_test$RainTomorrow), mode ='everything')
# Confusion matrix with threshold = 0.6
table(rain_balanced_test$RainTomorrow, glm_predict_6_balanced)
error6_balanced <- mean(glm_predict_6_balanced!=rain_balanced_test$RainTomorrow)
accuracy6_balanced <- mean(glm_predict_6_balanced==rain_balanced_test$RainTomorrow)
cm6_balanced <- confusionMatrix(data = factor(glm_predict_6_balanced), reference = factor(rain_balanced_test$RainTomorrow), mode ='everything')
a_balanced <- create_confusion_matrix(cm4_balanced, 0.4, error4_balanced, accuracy4_balanced)
b_balanced <- create_confusion_matrix(cm5_balanced, 0.5, error5_balanced, accuracy5_balanced)
c_balanced <- create_confusion_matrix(cm6_balanced, 0.6, error6_balanced, accuracy6_balanced)
# Threshold of 0.5 is the best among thresholds in terms of accuracy, sensitivity, and specificity
cm_all_balanced = list(a_balanced, b_balanced, c_balanced)
plot_width <- c(4, 4, 4)
grid.arrange(grobs = cm_all_balanced, nrow = 3, width = plot_width)
# Perform logistic regression with backward stepwise selection
logit_model <- glm(rain_balanced$RainTomorrow ~ ., data = rain_balanced, family = binomial)
# Perform forward stepwise selection using AIC with log(n)
logit_model <- stepAIC(logit_model, direction = "backward", k = log(nrow(rain_balanced)), trace = FALSE)
# Print the summary of the logistic regression model
summary(logit_model)
# Subset the dataframe with the chosen features based on stepwise selection
rain_subset <- rain_balanced[, c("MinTemp", "Sunshine", "WindGustSpeed", "WindSpeed9am", "WindSpeed3pm", "Humidity3pm", "Pressure9am", "Pressure3pm", "Cloud9am", "Cloud3pm", "Temp3pm", "RainToday", "RainTomorrow")]
set.seed(123)
train <- sample(1:nrow(rain_subset), nrow(rain_subset) * 0.75)
# Calculate the test indices
test <- setdiff(1:nrow(rain_subset), train)
# Split the target variable into train and test sets
rain_subset_train <- rain_subset[train,]
rain_subset_test <- rain_subset[test,]
head(rain_subset_train)
head(rain_subset_test)
# Model Definition
glm_model <- glm(data = rain_subset_train,
rain_subset_train$RainTomorrow ~ .,
family = binomial)
#R squared and Variance Inflation Factor (VIF)
#If the VIF value for a predictor variable is greater than 1, it indicates the presence of multicollinearity, suggesting that the predictor variable is highly correlated with other predictor variables in the model.
model_summary <- summary(glm_model)
summary(glm_model)
r2 <- 1 - (model_summary$deviance/model_summary$null.deviance) # 0.3845522
vif <- 1/(1-r2) # 1.624833
#Predict test with model
glm_predict <- predict(glm_model, rain_subset_test, type = "response")
#Convert predictions into 0,1 based on different thresholds
glm_predict_4<- ifelse(glm_predict > threshold4, 1, 0)
glm_predict_5<- ifelse(glm_predict > threshold5, 1, 0)
glm_predict_6<- ifelse(glm_predict > threshold6, 1, 0)
# Confusion matrix with threshold = 0.4
table(rain_subset_test$RainTomorrow, glm_predict_4)
error4 <- mean(glm_predict_4!=rain_subset_test$RainTomorrow)
accuracy4 <- mean(glm_predict_4==rain_subset_test$RainTomorrow)
cm4 <- confusionMatrix(data = factor(glm_predict_4), reference = factor(rain_subset_test$RainTomorrow), mode ='everything')
# Confusion matrix with threshold = 0.5
table(rain_subset_test$RainTomorrow, glm_predict_5)
error5 <- mean(glm_predict_5!=rain_subset_test$RainTomorrow)
accuracy5 <- mean(glm_predict_5==rain_subset_test$RainTomorrow)
cm5 <- confusionMatrix(data = factor(glm_predict_5), reference = factor(rain_subset_test$RainTomorrow), mode ='everything')
# Confusion matrix with threshold = 0.6
table(rain_subset_test$RainTomorrow, glm_predict_6)
error6 <- mean(glm_predict_6!=rain_subset_test$RainTomorrow)
accuracy6 <- mean(glm_predict_6==rain_subset_test$RainTomorrow)
cm6 <- confusionMatrix(data = factor(glm_predict_6), reference = factor(rain_subset_test$RainTomorrow), mode ='everything')
a <- create_confusion_matrix(cm4, 0.4, error4, accuracy4)
b <- create_confusion_matrix(cm5, 0.5, error5, accuracy5)
c <- create_confusion_matrix(cm6, 0.6, error6, accuracy6)
cm_all = list(a, b, c)
plot_width <- c(4, 4, 4)
grid.arrange(grobs = cm_all, nrow = 3, width = plot_width)
## Summary Statistics: F1-Score, Error, Accuracy
models <- c("Simple GLM", "GLM with Balancing", "GLM with Balancing and Feature Selection")
model_suffix <- c( "_0", "_balanced", "")
thresholds <- c(4, 5, 6)
threshold_values <- c(0.4, 0.5, 0.6)
metrics <- data.frame(Model = character(), Threshold = numeric(), F1_Score = numeric(), Error = numeric(), Accuracy = numeric(), stringsAsFactors = FALSE)
j <-  1
for (model in models) {
model_suff <- model_suffix[j]
j <-  j + 1
for (i in 1:length(thresholds)) {
threshold <- thresholds[i]
threshold_value <- threshold_values[i]
# Calculate the F1 score for each combination of model and threshold
cm_name <- paste0("cm", threshold, model_suff)
cm <- get(cm_name)
f1_score <- cm$byClass["F1"]
error_name <- paste0("error", threshold, model_suff)
error <- get(error_name)
accuracy_name <- paste0("accuracy", threshold, model_suff)
accuracy <- get(accuracy_name)
# Add the F1 score to the data frame
metrics <- rbind(metrics, data.frame(Model = model, Threshold = threshold_value, F1_Score = f1_score, Error = error, Accuracy = accuracy, stringsAsFactors = FALSE,row.names = NULL))
}
}
#metrics
metrics
ldahist(pred_lda$x[,1], g = pred_lda$class, col = 2)
grid.arrange(grobs = CM_all_lda, nrow = 3, width = plot_width)
# Find Empty Columns
empty_columns <- which(colSums(is.na(rain)) == nrow(rain))
names_of_empty_col<- names(rain)[empty_columns]
dim(rain)
# Omit rows with NAs. We are left with 56,420 rows and 23 columns
rain <- na.omit(rain)
# Set Yes/No values to 1, 0, respectively for RainToday and RainTomorrow
rain$RainToday <- ifelse(rain$RainToday == "Yes", 1,
ifelse(rain$RainToday == "No", 0, rain$RainToday))
#RainTomorrow is our Target variable
rain$RainTomorrow <- ifelse(rain$RainTomorrow == "Yes", 1,
ifelse(rain$RainTomorrow == "No", 0, rain$RainToday))
#Remove date and location columns and hot encode wind directions
rain <- rain[, !(names(rain) %in% c('Date', 'Location', 'WindGustDir', 'WindDir9am', 'WindDir3pm'))]
# New dimension of rain: 56,420 × 18
head(rain)
rain <- as.data.frame(lapply(rain, as.numeric))
summary(rain)
correlations <- cor_matrix['RainTomorrow',]
highly_correlated_columns <- correlations[abs(correlations) > 0.3 & correlations != 1]
column_names <- names(highly_correlated_columns)
print(column_names)
count_rain_today <- sum(rain$RainToday == 1)
count_no_rain_today <- sum(rain$RainToday == 0)
count_rain_tomorrow <- sum(rain$RainTomorrow == 1)
count_no_rain_tomorrow <- sum(rain$RainTomorrow == 0)
# Create a data frame with the counts
count_df <- data.frame(
Feature = c("RainToday", "RainTomorrow", "RainToday","RainTomorrow"),
Value = c("1", "1", "0", "0"),
Count = c(count_rain_today, count_rain_tomorrow, count_no_rain_today, count_no_rain_tomorrow)
)
plot_list <- list()
for (col in column_names) {
if (col == "RainToday") {
# Plot the barplot
bar_plot <- ggplot(count_df, aes(x = Value, y = Count, fill = Feature)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Feature", y = "Count", fill = "") +
scale_fill_manual(values = c("red", "blue"), labels = c("RainToday", "RainTomorrow")) +
theme_minimal()
plot_list <- append(plot_list, list(bar_plot))
}
else {
density_plot <- rain%>% ggplot(aes(x = .data[[col]] , fill = factor(RainTomorrow))) +
geom_density(alpha = 0.5) +
labs(x = col, y = "Density", fill = "RainTomorrow") +
ggtitle(paste("Density Plot of ", col, "by Raintomorrow")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, size =10))
plot_list <- append(plot_list, list(density_plot))
}
}
print(plot_list)
grid.arrange(grobs = plot_list, nrow = 3, ncol = 2)
# Visualize density and bar plots
grid.arrange(grobs = plot_list, nrow = 3, ncol = 2)
# Confusion matrix with threshold = 0.4
table(rain_n_test0$RainTomorrow, glm_predict_4_0)
grid.arrange(grobs = cm_all0, nrow = 3, width = plot_width)
summary(rain)
dim(rain)
file_path <- "/Users/Sofia/Desktop/Rain_Australia/weatherAUS.csv"
rain <- read.csv(file_path)
head(rain)
summary(rain)
dim(rain)
# Model definition starting from the previous glm_bal model:
lda<- lda(data = rain_subset_train_NoOutliers,RainTomorrow ~.,family = "binomial")
lda
pred_lda<- predict(lda, rain_subset_test, type = "response")
post_lda<- pred_lda$posterior
pred_lda_04<- as.factor(ifelse(post_lda[,2] > threshold4, 1, 0))
pred_lda_05<- as.factor(ifelse(post_lda[,2] > threshold5, 1, 0))
pred_lda_06<- as.factor(ifelse(post_lda[,2] > threshold6, 1, 0))
# Confusion matrix with threshold = 0.4
error_lda4 <- mean(pred_lda_04!=rain_subset_test$RainTomorrow)
accuracy_lda4 <- mean(pred_lda_04==rain_subset_test$RainTomorrow)
lda_CM04 <- confusionMatrix(data = factor(pred_lda_04), reference = factor(rain_subset_test$RainTomorrow), mode ='everything')
# Confusion matrix with threshold = 0.5
error_lda5 <- mean(pred_lda_05!=rain_subset_test$RainTomorrow)
accuracy_lda5 <- mean(pred_lda_05==rain_subset_test$RainTomorrow)
lda_CM05 <- confusionMatrix(data = factor(pred_lda_05), reference = factor(rain_subset_test$RainTomorrow), mode ='everything')
# Confusion matrix with threshold = 0.6
error_lda6 <- mean(pred_lda_06!=rain_subset_test$RainTomorrow)
accuracy_lda6 <- mean(pred_lda_06==rain_subset_test$RainTomorrow)
lda_CM06 <- confusionMatrix(data = factor(pred_lda_06), reference = factor(rain_subset_test$RainTomorrow), mode ='everything')
A <- create_confusion_matrix(lda_CM04, 0.4, error_lda4, accuracy_lda4)
B <- create_confusion_matrix(lda_CM05, 0.5, error_lda5, accuracy_lda5)
C <- create_confusion_matrix(lda_CM06, 0.6, error_lda6, accuracy_lda6)
# Threshold of 0.6 is the best among thresholds in terms of accuracy, sensitivity, and specificity
CM_all_lda = list(A,B,C)
plot_width <- c(4, 4, 4)
grid.arrange(grobs = CM_all_lda, nrow = 3, width = plot_width)
qda<- qda(data = rain_subset_train_NoOutliers,RainTomorrow ~.,family = "binomial")
qda
pred_qda<- predict(qda, rain_subset_test, type = "response")
post_qda<- pred_qda$posterior
pred_qda_04<- as.factor(ifelse(post_qda[,2] > threshold4, 1, 0))
pred_qda_05<- as.factor(ifelse(post_qda[,2] > threshold5, 1, 0))
pred_qda_06<- as.factor(ifelse(post_qda[,2] > threshold6, 1, 0))
# Confusion matrix with threshold = 0.4
error_qda4 <- mean(pred_qda_04!=rain_subset_test$RainTomorrow)
accuracy_qda4 <- mean(pred_qda_04==rain_subset_test$RainTomorrow)
qda_CM04 <- confusionMatrix(data = factor(pred_qda_04), reference = factor(rain_subset_test$RainTomorrow), mode ='everything')
# Confusion matrix with threshold = 0.5
error_qda5 <- mean(pred_qda_05!=rain_subset_test$RainTomorrow)
accuracy_qda5 <- mean(pred_qda_05==rain_subset_test$RainTomorrow)
qda_CM05 <- confusionMatrix(data = factor(pred_qda_05), reference = factor(rain_subset_test$RainTomorrow), mode ='everything')
# Confusion matrix with threshold = 0.6
error_qda6 <- mean(pred_qda_06!=rain_subset_test$RainTomorrow)
accuracy_qda6 <- mean(pred_qda_06==rain_subset_test$RainTomorrow)
qda_CM06 <- confusionMatrix(data = factor(pred_qda_06), reference = factor(rain_subset_test$RainTomorrow), mode ='everything')
A <- create_confusion_matrix(qda_CM04, 0.4, error_qda4, accuracy_qda4)
B <- create_confusion_matrix(qda_CM05, 0.5, error_qda5, accuracy_qda5)
C <- create_confusion_matrix(qda_CM06, 0.6, error_qda6, accuracy_qda6)
# Threshold of 0.05 is the best among thresholds in terms of accuracy, sensitivity, and specificity
CM_all_qda = list(A,B,C)
plot_width <- c(4, 4, 4)
grid.arrange(grobs = CM_all_qda, nrow = 3, width = plot_width)
install.packages("kableExtra")
library(kableextra)
library(kableextra)
library(corrplot)
library(ggplot2)
library(caret)
library(magrittr)
library(gridExtra)
library(scales)
library(DMwR2)
library(UBL)
library(caret)
library(MASS)
library(ipred)
library(rsample)
library(mlr)
library(knitr)
library(glmnet)
library(outliers)
library(class)
library(kableextra)
install.packages("kableExtra")
library(kableextra)
library(kableextra)
library(kableExtra)
## Find features with highest correlation with target variable (RainTomorrow)
correlations <- cor_matrix['RainTomorrow',]
highly_correlated_columns <- correlations[abs(correlations) > 0.3 & correlations != 1]
column_names <- names(highly_correlated_columns)
print(column_names)
rain_subset <- rain[,c(column_names)]
# We are trying to visualize relationship between Target Variable, RainTomorrow with the features having the highest correlation
# Calculate the count of each feature
count_rain_today <- sum(rain$RainToday == 1)
count_no_rain_today <- sum(rain$RainToday == 0)
count_rain_tomorrow <- sum(rain$RainTomorrow == 1)
count_no_rain_tomorrow <- sum(rain$RainTomorrow == 0)
# Create a data frame with the counts
count_df <- data.frame(
Feature = c("RainToday", "RainTomorrow", "RainToday","RainTomorrow"),
Value = c("1", "1", "0", "0"),
Count = c(count_rain_today, count_rain_tomorrow, count_no_rain_today, count_no_rain_tomorrow)
)
plot_list <- list()
for (col in column_names) {
if (col == "RainToday") {
# Plot the barplot
bar_plot <- ggplot(count_df, aes(x = Value, y = Count, fill = Feature)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Feature", y = "Count", fill = "") +
scale_fill_manual(values = c("red", "blue"), labels = c("RainToday", "RainTomorrow")) +
theme_minimal()
plot_list <- append(plot_list, list(bar_plot))
}
else {
density_plot <- rain%>% ggplot(aes(x = .data[[col]] , fill = factor(RainTomorrow))) +
geom_density(alpha = 0.5) +
labs(x = col, y = "Density", fill = "RainTomorrow") +
ggtitle(paste("Density Plot of ", col, "by Raintomorrow")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, size =10))
plot_list <- append(plot_list, list(density_plot))
}
}
library(corrplot)
library(ggplot2)
library(caret)
library(magrittr)
library(gridExtra)
library(scales)
library(DMwR2)
library(UBL)
library(caret)
library(MASS)
library(ipred)
library(rsample)
library(mlr)
library(knitr)
library(glmnet)
library(outliers)
library(class)
library(kableExtra)
file_path <- "/Users/Sofia/Desktop/Rain_Australia/weatherAUS.csv"
rain <- read.csv(file_path)
head(rain)
summary(rain)
dim(rain)
file_path2 <- "/Users/Sofia/Desktop/Rain_Australia/.csv"
feature_toc <- read.csv(file_path2)
# Find Empty Columns
empty_columns <- which(colSums(is.na(rain)) == nrow(rain))
names_of_empty_col<- names(rain)[empty_columns]
dim(rain)
# Omit rows with NAs. We are left with 56,420 rows and 23 columns
rain <- na.omit(rain)
# Set Yes/No values to 1, 0, respectively for RainToday and RainTomorrow
rain$RainToday <- ifelse(rain$RainToday == "Yes", 1,
ifelse(rain$RainToday == "No", 0, rain$RainToday))
#RainTomorrow is our Target variable
rain$RainTomorrow <- ifelse(rain$RainTomorrow == "Yes", 1,
ifelse(rain$RainTomorrow == "No", 0, rain$RainToday))
#Remove date, location columns, and wind direction columns
rain <- rain[, !(names(rain) %in% c('Date', 'Location', 'WindGustDir', 'WindDir9am', 'WindDir3pm'))]
# New dimension of rain: 56,420 × 18
head(rain)
rain <- as.data.frame(lapply(rain, as.numeric))
summary(rain)
# Build a Correlation Matrix
cor_matrix <- cor(rain)
# Create a heatmap from the correlation matrix with blue, white, and green color scheme
heatmap(cor_matrix, col = colorRampPalette(c("blue", "white", "green"))(100))
# Add a color legend to corr_matrix
legend_colors <- c("blue", "white", "green")
legend("right", legend = c(-1, 0, 1), fill = legend_colors, title = "Correlation")
# Add a main title
title(main = "Correlation Heatmap")
#Plot correlation matrix with numerical values
corrplot <- corrplot(cor(rain[,-19]),
method = "number",
diag = TRUE,
tl.cex = 0.4,
number.cex = 0.5,
tl.col = "black")
## Find features with highest correlation with target variable (RainTomorrow)
correlations <- cor_matrix['RainTomorrow',]
highly_correlated_columns <- correlations[abs(correlations) > 0.3 & correlations != 1]
column_names <- names(highly_correlated_columns)
print(column_names)
rain_subset <- rain[,c(column_names)]
# We are trying to visualize relationship between Target Variable, RainTomorrow with the features having the highest correlation
# Calculate the count of each feature
count_rain_today <- sum(rain$RainToday == 1)
count_no_rain_today <- sum(rain$RainToday == 0)
count_rain_tomorrow <- sum(rain$RainTomorrow == 1)
count_no_rain_tomorrow <- sum(rain$RainTomorrow == 0)
# Create a data frame with the counts
count_df <- data.frame(
Feature = c("RainToday", "RainTomorrow", "RainToday","RainTomorrow"),
Value = c("1", "1", "0", "0"),
Count = c(count_rain_today, count_rain_tomorrow, count_no_rain_today, count_no_rain_tomorrow)
)
plot_list <- list()
for (col in column_names) {
if (col == "RainToday") {
# Plot the barplot
bar_plot <- ggplot(count_df, aes(x = Value, y = Count, fill = Feature)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Feature", y = "Count", fill = "") +
scale_fill_manual(values = c("red", "blue"), labels = c("RainToday", "RainTomorrow")) +
theme_minimal()
plot_list <- append(plot_list, list(bar_plot))
}
else {
density_plot <- rain%>% ggplot(aes(x = .data[[col]] , fill = factor(RainTomorrow))) +
geom_density(alpha = 0.5) +
labs(x = col, y = "Density", fill = "RainTomorrow") +
ggtitle(paste("Density Plot of ", col, "by Raintomorrow")) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5, size =10))
plot_list <- append(plot_list, list(density_plot))
}
}
# Visualize density and bar plots
grid.arrange(grobs = plot_list, nrow = 3, ncol = 2)
file_path2 <- "/Users/Sofia/Desktop/Rain_Australia/Feature_TOC.csv"
feature_toc <- read.csv(file_path2)
kbl(feature_toc)
feature_toc %>%
kbl(caption = "Table of Features") %>%
kable_classic(full_width = F, html_font = "Cambria")
file_path2 <- "/Users/Sofia/Desktop/Rain_Australia/Feature_TOC.csv"
feature_toc <- read.csv(file_path2)
kbl(feature_toc)
file_path2 <- "/Users/Sofia/Desktop/Rain_Australia/Feature_TOC.csv"
feature_toc <- read.csv(file_path2)
kbl(feature_toc)
feature_toc %>%
kbl(caption = "Table of Features") %>%
kable_classic(full_width = F, html_font = "Cambria")
file_path2 <- "/Users/Sofia/Desktop/Rain_Australia/Feature_TOC.csv"
feature_toc <- read.csv(file_path2)
kbl(feature_toc)
feature_toc %>%
kbl(caption = "Table of Features") %>%
kable_classic(full_width = F, html_font = "Cambria")
file_path2 <- "/Users/Sofia/Desktop/Rain_Australia/Feature_TOC.csv"
feature_toc <- read.csv(file_path2)
feature_toc %>%
kbl(caption = "Table of Features") %>%
kable_classic(full_width = F, html_font = "Cambria")
file_path2 <- "/Users/Sofia/Desktop/Rain_Australia/Feature_TOC.csv"
feature_toc <- read.csv(file_path2)
feature_toc %>%
kbl() %>%
kable_material(c("striped", "hover"))
```
file_path2 <- "/Users/Sofia/Desktop/Rain_Australia/Feature_TOC.csv"
feature_toc <- read.csv(file_path2)
feature_toc %>%
kbl() %>%
kable_material(c("striped", "hover"))
library(kableExtra)
file_path2 <- "/Users/Sofia/Desktop/Rain_Australia/Feature_TOC.csv"
feature_toc <- read.csv(file_path2)
feature_toc %>%
knitr::kable(
format = "latex",
align = "l",
booktabs = TRUE,
longtable = TRUE,
linesep = "",
) %>%
kableExtra::kable_styling(
position = "left",
latex_options = c("striped", "repeat_header"),
stripe_color = "gray!15"
)
