labs(x = "Sunshine",
y = "Max Temperature",
color = "Rain Tomorrow") +
theme(legend.position = c(0.8, 0.8))
# original classification :
ggplot(rain_n_test0 , aes(x =Sunshine,
y = MaxTemp,
color= as.factor(RainTomorrow) )) +
geom_point()+
labs(x = "Sunshine",
y = "Max Temperature",
color = "Rain Tomorrow") +
theme(legend.position = c(0.8, 0.8))
# original classification :
ggplot(rain_n_test0 , aes(x =Sunshine,
y = MinTemp,
color= as.factor(RainTomorrow) )) +
geom_point()+
labs(x = "Sunshine",
y = "Max Temperature",
color = "Rain Tomorrow") +
theme(legend.position = c(0.8, 0.8))
# original classification :
ggplot(rain_n_test0 , aes(x =Cloud9am ,
y = Rainfall,
color= as.factor(RainTomorrow) )) +
geom_point()+
labs(x = "Sunshine",
y = "Max Temperature",
color = "Rain Tomorrow") +
theme(legend.position = c(0.8, 0.8))
# original classification :
ggplot(rain_n_test0 , aes(x = Rainfall,
y = Cloud9am,
color= as.factor(RainTomorrow) )) +
geom_point()+
labs(x = "Sunshine",
y = "Max Temperature",
color = "Rain Tomorrow") +
theme(legend.position = c(0.8, 0.8))
#looking for outliers in our data after balancing and feature selection
# Absolute Magnitude
g1<- ggplot(data = rain_subset_train, aes(y = MinTemp,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("Min Temperature")
library(corrplot)
library(ggplot2)
library(caret)
library(magrittr)
library(gridExtra)
library(scales)
library(DMwR2)
library(UBL)
library(caret)
library(MASS)
library(ipred)
library(rsample)
library(mlr)
library(knitr)
library(glmnet)
#looking for outliers in our data after balancing and feature selection
# Absolute Magnitude
g1<- ggplot(data = rain_subset_train, aes(y = MinTemp,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("Min Temperature")
#looking for outliers in our data after balancing and feature selection
# Absolute Magnitude
g1<- ggplot(data = rain_subset_train, aes(y = MinTemp,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("Min Temperature")
gl
#looking for outliers in our data after balancing and feature selection
# Absolute Magnitude
g1<- ggplot(data = rain_subset_train, aes(y = MinTemp,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("Min Temperature")
plot(gl)
#looking for outliers in our data after balancing and feature selection
# Absolute Magnitude
g1<- ggplot(data = rain_subset_train, aes(y = MinTemp,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("Min Temperature")
chisq.out.test(train$Absolute_Magnitude)
#looking for outliers in our data after balancing and feature selection
# Absolute Magnitude
g1<- ggplot(data = rain_subset_train, aes(y = MinTemp,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("Min Temperature")
chisq.out.test(train$Absolute_Magnitude)
#looking for outliers in our data after balancing and feature selection
# Absolute Magnitude
g1<- ggplot(data = rain_subset_train, aes(y = MinTemp,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("Min Temperature")
chisq.out.test(rain_subset_train$MinTemp)
#looking for outliers in our data after balancing and feature selection
# Absolute Magnitude
g1<- ggplot(data = rain_subset_train, aes(y = MinTemp,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("Min Temperature")
chisq.test(rain_subset_train$MinTemp)
#g2<- ggplot(data = train, aes(y = ,fill = 2)) +
#geom_boxplot(outlier.colour = "red", outlier.shape = 16,
#outlier.size = 2)+
#theme(legend.position="none") +
#ylab("Estimated Diameter")
#looking for outliers in our data after balancing and feature selection
# Absolute Magnitude
g1<- ggplot(data = rain_subset_train, aes(y = MinTemp,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("Min Temperature")
chisq.out.test(rain_subset_train$MinTemp)
library(outliers)
install.packages("outliers")
library(outliers)
#looking for outliers in our data after balancing and feature selection
# Absolute Magnitude
g1<- ggplot(data = rain_subset_train, aes(y = MinTemp,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("Min Temperature")
chisq.out.test(rain_subset_train$MinTemp)
#g2<- ggplot(data = train, aes(y = ,fill = 2)) +
#geom_boxplot(outlier.colour = "red", outlier.shape = 16,
#outlier.size = 2)+
#theme(legend.position="none") +
#ylab("Estimated Diameter")
#looking for outliers in our data after balancing and feature selection
# Absolute Magnitude
g1<- ggplot(data = rain_subset_train, aes(y = MinTemp,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("Min Temperature")
chisq.out.test(rain_subset_train$MinTemp)
which(rain_subset_train$MinTemp == 0)
#g2<- ggplot(data = train, aes(y = ,fill = 2)) +
#geom_boxplot(outlier.colour = "red", outlier.shape = 16,
#outlier.size = 2)+
#theme(legend.position="none") +
#ylab("Estimated Diameter")
#looking for outliers in our data after balancing and feature selection
# Absolute Magnitude
g1<- ggplot(data = rain_subset_train, aes(y = MinTemp,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("Min Temperature")
print(g1)
chisq.out.test(rain_subset_train$MinTemp)
#which(rain_subset_train$MinTemp == 0)
#g2<- ggplot(data = train, aes(y = ,fill = 2)) +
#geom_boxplot(outlier.colour = "red", outlier.shape = 16,
#outlier.size = 2)+
#theme(legend.position="none") +
#ylab("Estimated Diameter")
g2<- ggplot(data = rain_subset_train, aes(y = MaxTemp,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("Max Temperature")
print(g2)
print(colnames(rain_subset_train))
g2<- ggplot(data = rain_subset_train, aes(y = Sunshine,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("Sunshine")
print(g2)
chisq.out.test(rain_subset_train$Sunshine)
which(rain_subset_train$Sunshine == 1)
g2<- ggplot(data = rain_subset_train, aes(y = Sunshine,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("Sunshine")
print(g2)
chisq.out.test(rain_subset_train$Sunshine)
which(rain_subset_train$Sunshine == 1)
print(colnames(rain_subset_train))
g3<- ggplot(data = rain_subset_train, aes(y = WindGustSpeed,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("WindGustSpeed")
print(g3)
chisq.out.test(rain_subset_train$WindGustSpeed)
chisq.out.test(rain_subset_train$WindGustSpeed)
which(rain_subset_train$WindGustSpeed == 0.939130434782609)
print(colnames(rain_subset_train))
g4<- ggplot(data = rain_subset_train, aes(y = WindSpeed9am,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("WindSpeed9am")
print(g4)
chisq.out.test(rain_subset_train$WindSpeed9am)
which(rain_subset_train$WindSpeed9am == 0.969230769230769)
print(colnames(rain_subset_train))
g5<- ggplot(data = rain_subset_train, aes(y = WindSpeed3pm,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("WindSpeed3pm")
print(g5)
chisq.out.test(rain_subset_train$WindSpeed3pm)
which(rain_subset_train$WindSpeed3pm == 0.851351351351351)
print(colnames(rain_subset_train))
g6<- ggplot(data = rain_subset_train, aes(y = Humidity3pm,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("Humidity3pm")
print(g6)
chisq.out.test(rain_subset_train$Humidity3pm)
which(rain_subset_train$Humidity3pm ==0.01)
g5<- ggplot(data = rain_subset_train, aes(y = WindSpeed3pm,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("WindSpeed3pm")
print(g5)
g7<- ggplot(data = rain_subset_train, aes(y = Pressure9am,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("Pressure9am")
print(g7)
chisq.out.test(rain_subset_train$Pressure9am)
which(rain_subset_train$Pressure9am ==0.0283806343906518)
chisq.out.test(rain_subset_train$Pressure9am)
g8<- ggplot(data = rain_subset_train, aes(y = Pressure3pm,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("Pressure3pm")
print(g8)
chisq.out.test(rain_subset_train$Pressure3pm)
which(rain_subset_train$Pressure3pm ==0)
g9<- ggplot(data = rain_subset_train, aes(y = Cloud9am,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("Cloud9am")
print(g9)
chisq.out.test(rain_subset_train$Cloud9am)
which(rain_subset_train$Cloud9am ==0)
chisq.out.test(rain_subset_train$Cloud9am)
g10<- ggplot(data = rain_subset_train, aes(y = Cloud3pm,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("Cloud3pm")
print(g10)
chisq.out.test(rain_subset_train$Cloud3pm)
which(rain_subset_train$Cloud3pm ==0)
chisq.out.test(rain_subset_train$Cloud3pm)
g11<- ggplot(data = rain_subset_train, aes(y = Temp3pm,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("Temp3pm")
print(g11)
chisq.out.test(rain_subset_train$Temp3pm)
which(rain_subset_train$Temp3pm ==1)
chisq.out.test(rain_subset_train$Temp3pm)
g12<- ggplot(data = rain_subset_train, aes(y = RainToday,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("RainToday")
print(g12)
chisq.out.test(rain_subset_train$RainToday)
which(rain_subset_train$RainToday ==1)
grid.arrange(g1, g2, g3,g4,g5,g6,g7,g8,g9,g10,g11,  nrow = 4)
grid.arrange(g1, g2, g3,g4,g5,g6,g7,g8,g9,g10,g11,  nrow = 3)
#looking for outliers in our data after balancing and feature selection
print(colnames(rain_subset_train))
# Absolute Magnitude
g1<- ggplot(data = rain_subset_train, aes(y = MinTemp,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("Min Temperature")
#print(g1)
chisq.out.test(rain_subset_train$MinTemp)
which(rain_subset_train$MinTemp == 0)
g2<- ggplot(data = rain_subset_train, aes(y = Sunshine,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("Sunshine")
#print(g2)
chisq.out.test(rain_subset_train$Sunshine)
which(rain_subset_train$Sunshine == 1)
g3<- ggplot(data = rain_subset_train, aes(y = WindGustSpeed,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("WindGustSpeed")
#print(g3)
chisq.out.test(rain_subset_train$WindGustSpeed)
which(rain_subset_train$WindGustSpeed == 0.939130434782609)
g4<- ggplot(data = rain_subset_train, aes(y = WindSpeed9am,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("WindSpeed9am")
#print(g4)
chisq.out.test(rain_subset_train$WindSpeed9am)
which(rain_subset_train$WindSpeed9am == 0.969230769230769)
g5<- ggplot(data = rain_subset_train, aes(y = WindSpeed3pm,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("WindSpeed3pm")
#print(g5)
chisq.out.test(rain_subset_train$WindSpeed3pm)
which(rain_subset_train$WindSpeed3pm == 0.851351351351351)
g6<- ggplot(data = rain_subset_train, aes(y = Humidity3pm,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("Humidity3pm")
#print(g6)
chisq.out.test(rain_subset_train$Humidity3pm)
which(rain_subset_train$Humidity3pm ==0.01)
g7<- ggplot(data = rain_subset_train, aes(y = Pressure9am,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("Pressure9am")
#print(g7)
chisq.out.test(rain_subset_train$Pressure9am)
which(rain_subset_train$Pressure9am ==0.0283806343906518)
g8<- ggplot(data = rain_subset_train, aes(y = Pressure3pm,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("Pressure3pm")
#print(g8)
chisq.out.test(rain_subset_train$Pressure3pm)
which(rain_subset_train$Pressure3pm ==0)
g9<- ggplot(data = rain_subset_train, aes(y = Cloud9am,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("Cloud9am")
#print(g9)
chisq.out.test(rain_subset_train$Cloud9am)
which(rain_subset_train$Cloud9am ==0) # we got a p-value of 0.07 so we cannot refute the null hypothesis
g10<- ggplot(data = rain_subset_train, aes(y = Cloud3pm,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("Cloud3pm")
#print(g10)
chisq.out.test(rain_subset_train$Cloud3pm) #p-value = 0.04988
which(rain_subset_train$Cloud3pm ==0)
g11<- ggplot(data = rain_subset_train, aes(y = Temp3pm,fill = 2)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16,
outlier.size = 2)+
theme(legend.position="none") +
ylab("Temp3pm")
#print(g11)
chisq.out.test(rain_subset_train$Temp3pm)#p-value = 0.0003997
which(rain_subset_train$Temp3pm ==1)
grid.arrange(g1, g2, g3,g4,g5,g6,g7,g8,g9,g10,g11,  nrow = 3)
chisq.out.test(rain_subset_train$MinTemp)
which(rain_subset_train$MinTemp == 0)
chisq.out.test(rain_subset_train$Sunshine)
which(rain_subset_train$Sunshine == 1)
chisq.out.test(rain_subset_train$WindGustSpeed)
which(rain_subset_train$WindGustSpeed == 0.939130434782609)
rain_subset_train$WindGustSpeed == 0.939130434782609
rain_subset_train[rain_subset_train$WindGustSpeed == 0.939130434782609]
rain_subset_train[rain_subset_train$WindGustSpeed == 0.939130434782609]
rain_subset_train$WindGustSpeed[rain_subset_train$WindGustSpeed == 0.939130434782609]
chisq.out.test(rain_subset_train$WindSpeed9am)
which(rain_subset_train$WindSpeed9am == 0.969230769230769)
chisq.out.test(rain_subset_train$WindSpeed3pm)
which(rain_subset_train$WindSpeed3pm == 0.851351351351351)
chisq.out.test(rain_subset_train$Humidity3pm)
which(rain_subset_train$Humidity3pm ==0.01)
chisq.out.test(rain_subset_train$Pressure9am)
which(rain_subset_train$Pressure9am ==0.0283806343906518)
chisq.out.test(rain_subset_train$Pressure3pm)
which(rain_subset_train$Pressure3pm ==0)
chisq.out.test(rain_subset_train$Cloud3pm) #p-value = 0.04988
which(rain_subset_train$Cloud3pm ==0)
chisq.out.test(rain_subset_train$Temp3pm)#p-value = 0.0003997
which(rain_subset_train$Temp3pm ==1)
rain_subset_train_NoOutliers <- rain_subset_train[-c(4596,10679,15369,1935,3782,10189,10959,15362,16105,18240,376,6965)]
lda<- lda(data = rain_subset_train_NoOutliers,RainTomorrow ~.,family = "binomial")
summary(lda)
lda
# Model definition starting from the previous glm_bal model:
lda<- lda(data = rain_subset_train_NoOutliers,RainTomorrow ~.,family = "binomial")
lda
pred_lda<- predict(lda, rain_subset_test, type = "response")
post_lda<- pred_lda$posterior
pred_lda_04<- as.factor(ifelse(post_lda_compl[,2] > threshold4, 1, 0))
#Test/Train Split
set.seed(123)
train0 <- sample(1:nrow(rain_n), nrow(rain_n) * 0.75)
# Calculate the test indices
test0 <- setdiff(1:nrow(rain_n), train0)
# Split the target variable into train and test sets
rain_n_train0 <- rain_n[train0,]
rain_n_test0 <- rain_n[test0 ,]
glm_model0 <- glm(data = rain_n_train0,
rain_n_train0$RainTomorrow ~ .,
family = binomial)
#R squared and Variance Inflation Factor (VIF)
#If the VIF value for a predictor variable is greater than 1, it indicates the presence of multicollinearity, suggesting that the predictor variable is highly correlated with other predictor variables in the model.
model_summary0 <- summary(glm_model0)
summary(glm_model0)
r2_0 <- 1 - (model_summary0$deviance/model_summary0$null.deviance) # 0.3698141
vif0 <- 1/(1-r2_0) # 1.586833
#Predict test with model
glm_predict0 <- predict(glm_model0, rain_n_test0, type = "response")
#Convert predictions into 0,1 based on different thresholds
threshold4 <- 0.4
threshold5 <- 0.5
threshold6 <- 0.6
glm_predict_4_0<- ifelse(glm_predict0 > threshold4, 1, 0)
glm_predict_5_0<- ifelse(glm_predict0 > threshold5, 1, 0)
glm_predict_6_0<- ifelse(glm_predict0 > threshold6, 1, 0)
create_confusion_matrix <- function(confusion_matrix) {
# Extract the confusion matrix table
cm_table <- as.data.frame(confusion_matrix$table)
#Extract F1 score
f1_score <- confusion_matrix$byClass["F1"]
# Plot the confusion matrix using ggplot2
ggplot(data = cm_table, aes(x = Reference, y = Prediction, fill = Freq)) +
geom_tile(color = "white") +
geom_text(aes(label = Freq), color = "black", size = 8) +
scale_fill_gradient(low = "white", high = "steelblue") +
labs(title = paste("Confusion Matrix with F1-Score:", round(f1_score, 3)), x = "Target", y = "Prediction") +
theme_minimal() +
theme(axis.text = element_text(size = 8),
plot.title = element_text(size = 8, face = "bold"))
}
# Confusion matrix with threshold = 0.4
table(rain_n_test0$RainTomorrow, glm_predict_4_0)
mean(glm_predict_4_0!=rain_n_test0$RainTomorrow)
cm4_0 <- confusionMatrix(data = factor(glm_predict_4_0), reference = factor(rain_n_test0$RainTomorrow), mode ='everything')
# Confusion matrix with threshold = 0.5
table(rain_n_test0$RainTomorrow, glm_predict_5_0)
mean(glm_predict_5_0!=rain_n_test0$RainTomorrow)
cm5_0 <- confusionMatrix(data = factor(glm_predict_5_0), reference = factor(rain_n_test0$RainTomorrow), mode ='everything')
# Confusion matrix with threshold = 0.6
table(rain_n_test0$RainTomorrow, glm_predict_6_0)
mean(glm_predict_6_0!=rain_n_test0$RainTomorrow)
cm6_0 <- confusionMatrix(data = factor(glm_predict_6_0), reference = factor(rain_n_test0$RainTomorrow), mode ='everything')
a0 <- create_confusion_matrix(cm4_0)
b0 <- create_confusion_matrix(cm5_0)
c0 <- create_confusion_matrix(cm6_0)
# Threshold of 0.05 is the best among thresholds in terms of accuracy, sensitivity, and specificity
cm_all0 = list(a0, b0, c0)
plot_width <- c(4, 4, 4)
grid.arrange(grobs = cm_all0, nrow = 3, width = plot_width)
# Model definition starting from the previous glm_bal model:
lda<- lda(data = rain_subset_train_NoOutliers,RainTomorrow ~.,family = "binomial")
lda
pred_lda<- predict(lda, rain_subset_test, type = "response")
post_lda<- pred_lda$posterior
pred_lda_04<- as.factor(ifelse(post_lda[,2] > threshold4, 1, 0))
pred_lda_05<- as.factor(ifelse(post_lda[,2] > threshold5, 1, 0))
pred_lda_06<- as.factor(ifelse(post_lda[,2] > threshold6, 1, 0))
post_lda<- pred_lda$posterior
pred_lda_04<- as.factor(ifelse(post_lda[,2] > threshold4, 1, 0))
pred_lda_05<- as.factor(ifelse(post_lda[,2] > threshold5, 1, 0))
pred_lda_06<- as.factor(ifelse(post_lda[,2] > threshold6, 1, 0))
# Confusion matrix with threshold = 0.4
table(rain_subset_test$RainTomorrow, pred_lda_04)
mean(pred_lda_04!=rain_subset_test$RainTomorrow)
lda_CM04 <- confusionMatrix(data = factor(pred_lda_04), reference = factor(rain_subset_test$RainTomorrow), mode ='everything')
# Confusion matrix with threshold = 0.5
table(rain_subset_test$RainTomorrow, pred_lda_05)
mean(pred_lda_05!=rain_subset_test$RainTomorrow)
lda_CM05 <- confusionMatrix(data = factor(pred_lda_05), reference = factor(rain_subset_test$RainTomorrow), mode ='everything')
# Confusion matrix with threshold = 0.6
table(rain_subset_test$RainTomorrow, pred_lda_06)
mean(pred_lda_06!=rain_subset_test$RainTomorrow)
lda_CM06 <- confusionMatrix(data = factor(pred_lda_06), reference = factor(rain_subset_test$RainTomorrow), mode ='everything')
A <- create_confusion_matrix(lda_CM04)
B <- create_confusion_matrix(lda_CM05)
C <- create_confusion_matrix(lda_CM06)
# Threshold of 0.05 is the best among thresholds in terms of accuracy, sensitivity, and specificity
CM_all_lda = list(A,B,C)
plot_width <- c(4, 4, 4)
grid.arrange(grobs = CM_all_lda, nrow = 3, width = plot_width)
